import { NextRequest, NextResponse } from 'next/server'
import { auth } from '@/auth'
import { env, serviceAvailability } from '@/lib/env'
import { validateWithSchema, GenerateBookSchema } from '@/lib/validation'
import OpenAI from 'openai'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω
const openai = serviceAvailability.openai ? new OpenAI({
  apiKey: env.OPENAI_API_KEY,
}) : null

// Rate limiting –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å Redis)
const requestCounts = new Map<string, { count: number; resetTime: number }>()

function checkRateLimit(userId: string): boolean {
  const now = Date.now()
  const windowMs = 60 * 60 * 1000 // 1 —á–∞—Å
  const maxRequests = 3 // 3 –∫–Ω–∏–≥–∏ –≤ —á–∞—Å

  const userStats = requestCounts.get(userId)
  
  if (!userStats || now > userStats.resetTime) {
    requestCounts.set(userId, { count: 1, resetTime: now + windowMs })
    return true
  }

  if (userStats.count >= maxRequests) {
    return false
  }

  userStats.count++
  return true
}

// –¢–∏–ø—ã –¥–ª—è –∫–Ω–∏–≥–∏
interface BookImage {
  url: string
  caption: string
  description: string
  originalName: string
  size: number
}

interface BookContent {
  title: any
  chapters: any
  totalChapters: any
  estimatedReadTime: number
  author: string
  bookType: string
  metadata: {
    bookType: string
    generatedAt: string
    wordCount: any
    imagesCount: number
    tokensUsed: number
  }
  images?: BookImage[]
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–Ω–∏–≥–∏
async function generateBookContent(
  bookType: string, 
  answers: Record<string, string>, 
  images: any[] = []
): Promise<BookContent> {
  if (!openai) {
    throw new Error('OpenAI service not available')
  }

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–Ω–∏–≥–∏
  const bookTypePrompts = {
    romantic: `–°–æ–∑–¥–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–Ω–∏–≥—É –∏–∑ 4-5 –≥–ª–∞–≤ –æ –ª—é–±–æ–≤–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–ø–ª—ã–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω. 
    –í–∫–ª—é—á–∏ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–º–µ–Ω—Ç–æ–≤, —á—É–≤—Å—Ç–≤, —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤. –ö–∞–∂–¥–∞—è –≥–ª–∞–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 800-1200 —Å–ª–æ–≤.`,
    
    family: `–°–æ–∑–¥–∞–π —Å–µ–º–µ–π–Ω—É—é —Ö—Ä–æ–Ω–∏–∫—É –∏–∑ 4-5 –≥–ª–∞–≤ –æ —Å–µ–º–µ–π–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–ø–ª—ã–π, —Å–µ–º–µ–π–Ω—ã–π —Ç–æ–Ω.
    –í–∫–ª—é—á–∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ–º—å–∏. –ö–∞–∂–¥–∞—è –≥–ª–∞–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 800-1200 —Å–ª–æ–≤.`,
    
    friendship: `–°–æ–∑–¥–∞–π –∫–Ω–∏–≥—É –æ –¥—Ä—É–∂–±–µ –∏–∑ 4-5 –≥–ª–∞–≤. –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –≤–µ—Å–µ–ª—ã–π —Ç–æ–Ω.
    –í–∫–ª—é—á–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–º–µ—à–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã. –ö–∞–∂–¥–∞—è –≥–ª–∞–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 800-1200 —Å–ª–æ–≤.`,
    
    child: `–°–æ–∑–¥–∞–π –¥–µ—Ç—Å–∫—É—é –∫–Ω–∏–≥—É –∏–∑ 3-4 –≥–ª–∞–≤ –æ —Ä–æ—Å—Ç–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ–∂–Ω—ã–π, –ª—é–±—è—â–∏–π —Ç–æ–Ω.
    –í–∫–ª—é—á–∏ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ. –ö–∞–∂–¥–∞—è –≥–ª–∞–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 600-1000 —Å–ª–æ–≤.`,
    
    travel: `–°–æ–∑–¥–∞–π –∫–Ω–∏–≥—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏–∑ 4-5 –≥–ª–∞–≤ –æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö. –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π, –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω.
    –í–∫–ª—é—á–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, –æ—Ç–∫—Ä—ã—Ç–∏—è, –≤—Å—Ç—Ä–µ—á–∏ —Å –ª—é–¥—å–º–∏. –ö–∞–∂–¥–∞—è –≥–ª–∞–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 800-1200 —Å–ª–æ–≤.`
  }

  const prompt = bookTypePrompts[bookType as keyof typeof bookTypePrompts] || bookTypePrompts.romantic

  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const answersText = Object.entries(answers)
    .map(([question, answer]) => `${question}: ${answer}`)
    .join('\n')

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
  const imageContext = images.length > 0 
    ? `\n\n–í –∫–Ω–∏–≥–µ –µ—Å—Ç—å ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –û—Ä–≥–∞–Ω–∏—á–Ω–æ –≤–∫–ª—é—á–∏ –æ–ø–∏—Å–∞–Ω–∏—è —ç—Ç–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ, –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω–∏ –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É—é—Ç –º–æ–º–µ–Ω—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.`
    : ''

  const fullPrompt = `${prompt}

–°–æ–∑–¥–∞–π –∫–Ω–∏–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
${answersText}${imageContext}

–í–ê–ñ–ù–û: 
- –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {"title": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "chapters": [{"number": 1, "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã", "content": "—Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã", "epigraph": "—ç–ø–∏–≥—Ä–∞—Ñ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"}]}
- –ö–∞–∂–¥–∞—è –≥–ª–∞–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞—Å—ã—â–µ–Ω–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–∞ –∏ –¥–µ—Ç–∞–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–ª–∞–≤
- –û–±—â–∏–π –æ–±—ä–µ–º: 4000-6000 —Å–ª–æ–≤`

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–∏–≥–∏. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤–∞–ª–∏–¥–Ω—ã–º JSON."
        },
        {
          role: "user", 
          content: fullPrompt
        }
      ],
      max_tokens: 16000,
      temperature: 0.8,
    })

    const content = completion.choices[0]?.message?.content
    if (!content) {
      throw new Error('No content generated')
    }

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    const bookData = JSON.parse(content)
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (!bookData.title || !Array.isArray(bookData.chapters)) {
      throw new Error('Invalid book structure')
    }

    return {
      title: bookData.title,
      chapters: bookData.chapters,
      totalChapters: bookData.chapters.length,
      estimatedReadTime: Math.ceil(
        bookData.chapters.reduce((total: number, chapter: any) => 
          total + (chapter.content?.length || 0), 0
        ) / 1000 // –ü—Ä–∏–º–µ—Ä–Ω–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
      ),
      author: 'VeloraBook AI',
      bookType,
      metadata: {
        bookType,
        generatedAt: new Date().toISOString(),
        wordCount: bookData.chapters.reduce((total: number, chapter: any) => 
          total + (chapter.content?.split(' ').length || 0), 0
        ),
        imagesCount: images.length,
        tokensUsed: completion.usage?.total_tokens || 0,
      }
    }
  } catch (error) {
    console.error('OpenAI generation error:', error)
    throw new Error('Failed to generate book content')
  }
}

export async function POST(request: NextRequest) {
  const startTime = Date.now()
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const session = await auth()
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI
    if (!serviceAvailability.openai) {
      return NextResponse.json({
        error: 'Book generation service temporarily unavailable. OpenAI API key not configured.',
        code: 'SERVICE_UNAVAILABLE'
      }, { status: 503 })
    }

    // Rate limiting
    if (!checkRateLimit(session.user.id)) {
      return NextResponse.json({
        error: 'Rate limit exceeded. You can generate 3 books per hour.',
        code: 'RATE_LIMIT_EXCEEDED'
      }, { status: 429 })
    }

    // –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json()
    const validatedData = validateWithSchema(GenerateBookSchema, body)
    
    console.log(`üìö Generating ${validatedData.bookType} book for user ${session.user.email}`)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–∏–≥—É, –ø–µ—Ä–µ–¥–∞–µ–º images —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    const bookContent = await generateBookContent(
      validatedData.bookType,
      validatedData.answers,
      validatedData.images || []
    )

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –∫–Ω–∏–≥–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (validatedData.images && validatedData.images.length > 0) {
      bookContent.images = validatedData.images.map((img, index) => ({
        url: img.base64,
        caption: `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ${index + 1}`,
        description: `–û—Å–æ–±–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–∑ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏`,
        originalName: img.name,
        size: img.size,
      }))
    }

    const duration = Date.now() - startTime
    console.log(`‚úÖ Book generated in ${duration}ms`)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json({
      success: true,
      book: bookContent,
      metadata: {
        generationTime: duration,
        timestamp: new Date().toISOString(),
      }
    })

  } catch (error) {
    const duration = Date.now() - startTime
    console.error('‚ùå Book generation failed:', error)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    if (error instanceof Error) {
      if (error.message.includes('Rate limit')) {
        return NextResponse.json({
          error: 'OpenAI rate limit exceeded. Please try again later.',
          code: 'OPENAI_RATE_LIMIT'
        }, { status: 429 })
      }

      if (error.message.includes('Invalid book structure')) {
        return NextResponse.json({
          error: 'Generated content has invalid structure. Please try again.',
          code: 'GENERATION_ERROR'
        }, { status: 500 })
      }

      if (error.message.includes('Failed to generate')) {
        return NextResponse.json({
          error: 'Failed to generate book content. Please try again.',
          code: 'GENERATION_FAILED'
        }, { status: 500 })
      }

      if (error.message.includes('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')) {
        return NextResponse.json({
          error: error.message,
          code: 'VALIDATION_ERROR'
        }, { status: 400 })
      }
    }

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    return NextResponse.json({
      error: 'Internal server error during book generation',
      code: 'INTERNAL_ERROR',
      debug: env.NODE_ENV === 'development' ? error : undefined
    }, { status: 500 })
  }
}