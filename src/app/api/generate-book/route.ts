'use server';

import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

// –Ø–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞
const apiKey = process.env.OPENAI_API_KEY || '';

// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
console.log('üîë OpenAI API –∫–ª—é—á:', apiKey ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: ' + apiKey.length + ')' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');

// –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let openai: OpenAI;
try {
  openai = new OpenAI({
    apiKey: apiKey,
  });
  console.log('‚úÖ OpenAI API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI API –∫–ª–∏–µ–Ω—Ç–∞:', error);
  openai = new OpenAI({
    apiKey: 'dummy-key'  // –§–∏–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
  });
}

interface ImageData {
  name: string;
  base64: string;
  size: number;
  dimensions: { width: number; height: number };
  compressed?: boolean;
}

interface GeneratedBook {
  title: string;
  chapters: Array<{
    number: number;
    title: string;
    content: string;
    epigraph?: string;
  }>;
  totalChapters: number;
  estimatedReadTime: number;
  author?: string;
  dedicatedTo?: string;
  bookType: string;
  createdAt: string;
  images?: Array<{
    url: string;
    caption?: string;
    description?: string;
    originalName?: string;
    size?: number;
  }>;
  metadata: {
    bookType: string;
    generatedAt: string;
    wordCount: number;
    imagesCount: number;
    imageAnalysis?: string[];
  };
}

interface RequestBody {
  bookType: string;
  answers: Record<string, string>;
  images?: ImageData[];
}

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const GENERATION_TIMEOUT = 180000; // 3 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ–±—ä–µ–º–Ω—ã—Ö –∫–Ω–∏–≥

export async function POST(request: NextRequest) {
  try {
    const { bookType, answers, images = [] } = await request.json();
    
    console.log('üîç API –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
      bookType,
      answersCount: Object.keys(answers).length,
      imagesCount: images.length,
      apiKeyExists: !!process.env.OPENAI_API_KEY
    });

    if (!bookType || !answers) {
      return NextResponse.json(
        { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∫–Ω–∏–≥–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç—ã' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º Promise —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => {
        reject(new Error('Timeout'));
      }, GENERATION_TIMEOUT);
    });

    // –°–æ–∑–¥–∞–µ–º Promise –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const generatePromise = generateBook(bookType, answers, images);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const result = await Promise.race([generatePromise, timeoutPromise]);
    
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return NextResponse.json({ success: true, book: result });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏:', error);
    
    let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏';
    let statusCode = 500;
    
    if (error instanceof Error) {
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
      
      if (error.message === 'Timeout') {
        errorMessage = '–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        statusCode = 408; // Request Timeout
      } else if (error.message.includes('API key')) {
        errorMessage = '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.';
        statusCode = 500;
      } else if (error.message.includes('rate limit')) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
        statusCode = 429; // Too Many Requests
      } else {
        errorMessage = error.message;
      }
    }
    
    return NextResponse.json(
      { success: false, error: errorMessage },
      { status: statusCode }
    );
  }
}

async function generateBook(bookType: string, answers: Record<string, string>, images: any[]) {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–Ω–∏–≥–∏...');
  console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { 
    bookType, 
    answersKeys: Object.keys(answers),
    imagesCount: images.length
  });
  
  const prompt = generateEnhancedPrompt(bookType, answers, images, []);
  
  try {
    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI API...');
    
    const completion = await openai.chat.completions.create({
      model: "gpt-4-turbo-preview",
      messages: [
        {
          role: "system",
          content: `–¢—ã —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –ø–∏—Å–∞—Ç–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥. –°–æ–∑–¥–∞–≤–∞–π –æ–±—ä–µ–º–Ω—ã–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –°–æ–∑–¥–∞–≤–∞–π –ü–û–õ–ù–£–Æ –∫–Ω–∏–≥—É —Å –í–°–ï–ú–ò –≥–ª–∞–≤–∞–º–∏ –∑–∞ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
- –ö–∞–∂–¥–∞—è –≥–ª–∞–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 600-900 —Å–ª–æ–≤
- –û–±—â–∏–π –æ–±—ä–µ–º: 4000-6000 —Å–ª–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π —è—Ä–∫–∏–π, –æ–±—Ä–∞–∑–Ω—ã–π —è–∑—ã–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏
- –í–∫–ª—é—á–∞–π –¥–∏–∞–ª–æ–≥–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω—ã

–°–¢–†–£–ö–¢–£–†–ê:
–ù–ê–ó–í–ê–ù–ò–ï –ö–ù–ò–ì–ò: [–Ω–∞–∑–≤–∞–Ω–∏–µ]

–ì–õ–ê–í–ê 1: [–Ω–∞–∑–≤–∞–Ω–∏–µ]
[–ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ 600-900 —Å–ª–æ–≤]

–ì–õ–ê–í–ê 2: [–Ω–∞–∑–≤–∞–Ω–∏–µ] 
[–ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ 600-900 —Å–ª–æ–≤]

...–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å–µ –≥–ª–∞–≤—ã...

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–π –í–°–ï –≥–ª–∞–≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é!`
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 12000, // ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 4000 –¥–æ 12000
      temperature: 0.8,
    });

    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenAI API –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // ‚úÖ –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
    if (completion.usage) {
      console.log('üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:', {
        prompt_tokens: completion.usage.prompt_tokens,
        completion_tokens: completion.usage.completion_tokens,
        total_tokens: completion.usage.total_tokens
      });
    }
    
    const generatedContent = completion.choices[0]?.message?.content;

    if (!generatedContent) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É - –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
    }

    // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –æ—Ç–≤–µ—Ç–∞
    const wordCount = generatedContent.split(' ').length;
    console.log(`üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–æ–≤: ${wordCount}`);
    
    if (wordCount < 2000) {
      console.warn('‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å...');
      
      // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
      const retryCompletion = await openai.chat.completions.create({
        model: "gpt-4-turbo-preview",
        messages: [
          {
            role: "system",
            content: `–°–æ–∑–¥–∞–π –ø–æ–ª–Ω—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í–ê–ñ–ù–û: —Å–æ–∑–¥–∞–π –í–°–ï –≥–ª–∞–≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é, –∫–∞–∂–¥–∞—è –≥–ª–∞–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 600-800 —Å–ª–æ–≤.`
          },
          {
            role: "user",
            content: `${prompt}\n\n–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –°–æ–∑–¥–∞–π –ø–æ–ª–Ω—É—é –∫–Ω–∏–≥—É —Å–æ –≤—Å–µ–º–∏ –≥–ª–∞–≤–∞–º–∏! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ!`
          }
        ],
        max_tokens: 14000,
        temperature: 0.7,
      });
      
      const retryContent = retryCompletion.choices[0]?.message?.content;
      if (retryContent && retryContent.split(' ').length > wordCount) {
        console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return structureEnhancedBook(retryContent, bookType, images, []);
      }
    }

    return structureEnhancedBook(generatedContent, bookType, images, []);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API:', error);
    throw error;
  }
}

function generateEnhancedPrompt(
  bookType: string, 
  answers: Record<string, string>, 
  images: ImageData[], 
  imageAnalysis: string[]
): string {
  
  // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  let imageSection = '';
  if (images.length > 0) {
    imageSection = `\n\n–§–û–¢–û: ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç`;
  }

  // –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–∂–∞—Ç–æ–º –≤–∏–¥–µ
  const keyAnswers = Object.entries(answers)
    .filter(([key, value]) => value && value.length > 10)
    .map(([key, value]) => `${key}: ${value}`)
    .join('\n');

  switch (bookType) {
    case 'romantic':
      return `
–°–æ–∑–¥–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–Ω–∏–≥—É —Å 6 –≥–ª–∞–≤–∞–º–∏ (600-900 —Å–ª–æ–≤ –∫–∞–∂–¥–∞—è):
1. –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –ø–µ—Ä–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
2. –†–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π 
3. –Ø—Ä–∫–∏–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
4. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏
5. –ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π –∏ —Ä–æ—Å—Ç
6. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ

–ò–ù–§–û–†–ú–ê–¶–ò–Ø:
${keyAnswers}
${imageSection}

–ü–∏—à–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏ –¥–∏–∞–ª–æ–≥–∞–º–∏. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–π –í–°–ï 6 –≥–ª–∞–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é!
      `;

    case 'family':
      return `
–°–æ–∑–¥–∞–π —Å–µ–º–µ–π–Ω—É—é –∫–Ω–∏–≥—É —Å 5 –≥–ª–∞–≤–∞–º–∏ (700-1000 —Å–ª–æ–≤ –∫–∞–∂–¥–∞—è):
1. –ö–æ—Ä–Ω–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏
2. –î–æ–º –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏
3. –Ø—Ä–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
4. –°–∏–ª–∞ —Å–µ–º—å–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
5. –¶–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—Å–ª–µ–¥–∏–µ

–ò–ù–§–û–†–ú–ê–¶–ò–Ø:
${keyAnswers}
${imageSection}

–ü–∏—à–∏ —Ç–µ–ø–ª–æ –∏ –¥—É—à–µ–≤–Ω–æ. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–π –í–°–ï 5 –≥–ª–∞–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é!
      `;

    case 'friendship':
      return `
–°–æ–∑–¥–∞–π –∫–Ω–∏–≥—É –æ –¥—Ä—É–∂–±–µ —Å 5 –≥–ª–∞–≤–∞–º–∏ (600-800 —Å–ª–æ–≤ –∫–∞–∂–¥–∞—è):
1. –ù–∞—á–∞–ª–æ –¥—Ä—É–∂–±—ã
2. –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è  
3. –°–º–µ—Ö –∏ –≤–µ—Å–µ–ª—å–µ
4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
5. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –±—É–¥—É—â–µ–µ

–ò–ù–§–û–†–ú–ê–¶–ò–Ø:
${keyAnswers}
${imageSection}

–ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ —Å —é–º–æ—Ä–æ–º. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–π –í–°–ï 5 –≥–ª–∞–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é!
      `;

    case 'child':
      return `
–°–æ–∑–¥–∞–π –¥–µ—Ç—Å–∫—É—é –∫–Ω–∏–≥—É —Å 4 –≥–ª–∞–≤–∞–º–∏ (600-800 —Å–ª–æ–≤ –∫–∞–∂–¥–∞—è):
1. –û–∂–∏–¥–∞–Ω–∏–µ –∏ —Ä–æ–∂–¥–µ–Ω–∏–µ
2. –ü–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —Ä–æ—Å—Ç
3. –•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
4. –õ—é–±–æ–≤—å –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è

–ò–ù–§–û–†–ú–ê–¶–ò–Ø:
${keyAnswers}
${imageSection}

–ü–∏—à–∏ –Ω–µ–∂–Ω–æ –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–π –í–°–ï 4 –≥–ª–∞–≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é!
      `;

    case 'travel':
      return `
–°–æ–∑–¥–∞–π –∫–Ω–∏–≥—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å 5 –≥–ª–∞–≤–∞–º–∏ (600-800 —Å–ª–æ–≤ –∫–∞–∂–¥–∞—è):
1. –ü–ª–∞–Ω—ã –∏ –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
2. –ü–µ—Ä–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
3. –û—Ç–∫—Ä—ã—Ç–∏—è –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
4. –¢—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ
5. –ò—Ç–æ–≥–∏ –∏ –ø–ª–∞–Ω—ã

–ò–ù–§–û–†–ú–ê–¶–ò–Ø:
${keyAnswers}
${imageSection}

–ü–∏—à–∏ –∂–∏–≤–æ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–π –í–°–ï 5 –≥–ª–∞–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é!
      `;

    default:
      return `–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ: ${keyAnswers}`;
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω–∏–ª matchAll() –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –≤–µ—Ä—Å–∏—é
function structureEnhancedBook(
  content: string, 
  bookType: string, 
  images: ImageData[],
  imageAnalysis: string[]
): GeneratedBook {
  
  console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É...');
  console.log('üìù –û–±—â–∏–π –æ–±—ä–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', content.length, '—Å–∏–º–≤–æ–ª–æ–≤');
  console.log('üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:', content.split(' ').length);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
  const titleMatch = content.match(/–ù–ê–ó–í–ê–ù–ò–ï –ö–ù–ò–ì–ò:\s*(.+)/i);
  const bookTitle = titleMatch ? titleMatch[1].trim() : getDefaultBookTitle(bookType);
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª —Ñ–ª–∞–≥ 's' –∏ –∑–∞–º–µ–Ω–∏–ª matchAll() –Ω–∞ exec()
  let chapters: string[] = [];
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ "–ì–õ–ê–í–ê X:" –±–µ–∑ —Ñ–ª–∞–≥–∞ 's'
  const chapterPattern = /–ì–õ–ê–í–ê\s+\d+:\s*([\s\S]+?)(?=–ì–õ–ê–í–ê\s+\d+:|$)/gi;
  let match;
  while ((match = chapterPattern.exec(content)) !== null) {
    if (match[0] && match[0].trim().length > 100) {
      chapters.push(match[0].trim());
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –ø–æ –Ω–æ–º–µ—Ä–∞–º "1.", "2." –∏ —Ç.–¥.
  if (chapters.length <= 1) {
    console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ...');
    const numberPattern = /(\d+\.\s*[\s\S]+?)(?=\d+\.\s*|$)/gi;
    chapters = [];
    
    let numberMatch;
    while ((numberMatch = numberPattern.exec(content)) !== null) {
      if (numberMatch[0] && numberMatch[0].trim().length > 100) {
        chapters.push(numberMatch[0].trim());
      }
    }
  }
  
  // –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º
  if (chapters.length <= 1) {
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –∞–±–∑–∞—Ü–µ–≤...');
    const paragraphs = content.split('\n\n').filter(p => p.trim().length > 50);
    const targetChapters = getTargetChapterCount(bookType);
    const paragraphsPerChapter = Math.ceil(paragraphs.length / targetChapters);
    
    chapters = [];
    for (let i = 0; i < paragraphs.length; i += paragraphsPerChapter) {
      const chapterContent = paragraphs.slice(i, i + paragraphsPerChapter).join('\n\n');
      if (chapterContent.trim().length > 100) {
        chapters.push(chapterContent);
      }
    }
  }

  console.log('üìñ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤:', chapters.length);

  const structuredChapters = chapters.map((chapter, index) => {
    // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã
    let cleanContent = chapter.trim();
    
    // –£–¥–∞–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –µ—Å–ª–∏ –æ–Ω–æ –ø–æ–ø–∞–ª–æ –≤ –≥–ª–∞–≤—É
    cleanContent = cleanContent.replace(/–ù–ê–ó–í–ê–ù–ò–ï –ö–ù–ò–ì–ò:.*$/gim, '').trim();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã
    const titlePattern = /^(?:–ì–õ–ê–í–ê\s+\d+:\s*)?(.+?)(?:\n\n|\n)/;
    const titleMatch = cleanContent.match(titlePattern);
    let chapterTitle = titleMatch ? titleMatch[1].trim() : getDefaultChapterTitle(bookType, index + 1);
    
    // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞–π–¥–µ–Ω
    if (titleMatch && titleMatch[1]) {
      cleanContent = cleanContent.replace(titlePattern, '').trim();
    }
    
    // –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    chapterTitle = chapterTitle.replace(/^["\-\s\d\.]+|["\-\s]+$/g, '');
    
    // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–∞–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –±–æ–ª—å—à–µ
    if (cleanContent.length < 200 && index < chapters.length - 1) {
      cleanContent = chapter.trim();
    }

    console.log(`üìÑ –ì–ª–∞–≤–∞ ${index + 1}: "${chapterTitle}" (${cleanContent.split(' ').length} —Å–ª–æ–≤)`);

    return {
      number: index + 1,
      title: chapterTitle,
      content: cleanContent
    };
  });

  const finalWordCount = content.split(' ').length;
  console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
    chapters: structuredChapters.length,
    totalWords: finalWordCount,
    averageWordsPerChapter: Math.round(finalWordCount / structuredChapters.length)
  });

  const finalBook: GeneratedBook = {
    title: bookTitle,
    chapters: structuredChapters,
    totalChapters: structuredChapters.length,
    estimatedReadTime: Math.ceil(finalWordCount / 150), // 150 —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –≤–¥—É–º—á–∏–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è
    author: "VeloraBook AI",
    dedicatedTo: getDedicationText(bookType),
    bookType,
    createdAt: new Date().toISOString(),
    images: images.length > 0 ? images.map((img, index) => ({
      url: img.base64,
      caption: `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ${index + 1}`,
      description: imageAnalysis[index] || '–û—Å–æ–±–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–∑ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏',
      originalName: img.name,
      size: img.size
    })) : undefined,
    metadata: {
      bookType,
      generatedAt: new Date().toISOString(),
      wordCount: finalWordCount,
      imagesCount: images.length,
      imageAnalysis: imageAnalysis.length > 0 ? imageAnalysis : undefined
    }
  };
  
  console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  
  return finalBook;
}

// –ü–æ–º–æ—â–Ω–∏–∫–∏
function getTargetChapterCount(bookType: string): number {
  switch (bookType) {
    case 'romantic': return 6;
    case 'family': return 5;
    case 'friendship': return 5;
    case 'child': return 4;
    case 'travel': return 5;
    default: return 5;
  }
}

function getDefaultBookTitle(bookType: string): string {
  switch (bookType) {
    case 'romantic':
      return '–ù–∞—à–∞ –ò—Å—Ç–æ—Ä–∏—è –õ—é–±–≤–∏';
    case 'family':
      return '–°–µ–º–µ–π–Ω–∞—è –•—Ä–æ–Ω–∏–∫–∞';
    case 'friendship':
      return '–ö–Ω–∏–≥–∞ –ù–∞—à–µ–π –î—Ä—É–∂–±—ã';
    case 'child':
      return '–ú–æ–π –ú–∞–ª–µ–Ω—å–∫–∏–π –ê–Ω–≥–µ–ª';
    case 'travel':
      return '–î–Ω–µ–≤–Ω–∏–∫ –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞';
    default:
      return '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ö–Ω–∏–≥–∞';
  }
}

function getDedicationText(bookType: string): string {
  switch (bookType) {
    case 'romantic':
      return '–ú–æ–µ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–æ–π –ª—é–±–≤–∏';
    case 'family':
      return '–ú–æ–µ–π –¥–æ—Ä–æ–≥–æ–π —Å–µ–º—å–µ - —Å–∞–º–æ–º—É —Ü–µ–Ω–Ω–æ–º—É –≤ –∂–∏–∑–Ω–∏';
    case 'friendship':
      return '–ú–æ–µ–º—É —Å–∞–º–æ–º—É –≤–µ—Ä–Ω–æ–º—É –∏ –¥–æ—Ä–æ–≥–æ–º—É –¥—Ä—É–≥—É';
    case 'child':
      return '–ú–æ–µ–º—É —Å–∞–º–æ–º—É –¥–æ—Ä–æ–≥–æ–º—É —Å–æ–∫—Ä–æ–≤–∏—â—É –Ω–∞ —Å–≤–µ—Ç–µ';
    case 'travel':
      return '–í—Å–µ–º, –∫—Ç–æ —Ä–∞–∑–¥–µ–ª–∏–ª —Å–æ –º–Ω–æ–π —ç—Ç–∏ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã';
    default:
      return '–¢–æ–º—É, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ—é –∂–∏–∑–Ω—å –æ—Å–æ–±–µ–Ω–Ω–æ–π';
  }
}

function getDefaultChapterTitle(bookType: string, chapterNumber: number): string {
  const titles = {
    romantic: [
      '–í—Å—Ç—Ä–µ—á–∞ –¥–≤—É—Ö —Å–µ—Ä–¥–µ—Ü',
      '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –ª—é–±–≤–∏', 
      '–ú–æ–∑–∞–∏–∫–∞ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤',
      '–í –æ–±—ä—è—Ç–∏—è—Ö –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç–∏',
      '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å',
      '–ú–µ—á—Ç—ã –Ω–∞ –¥–≤–æ–∏—Ö',
      '–í–µ—á–Ω–∞—è –ª—é–±–æ–≤—å'
    ],
    family: [
      '–ö–æ—Ä–Ω–∏ –∏ –Ω–∞—á–∞–ª–∞',
      '–î–æ–º, –≥–¥–µ –∂–∏–≤–µ—Ç –ª—é–±–æ–≤—å',
      '–ö–∞–ª–µ–π–¥–æ—Å–∫–æ–ø –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π', 
      '–°–∏–ª–∞ –µ–¥–∏–Ω—Å—Ç–≤–∞',
      '–ú—É–¥—Ä–æ—Å—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–π',
      '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –º–µ—á—Ç—ã'
    ],
    friendship: [
      '–ö–∞–∫ –∑–∞—Ä–æ–¥–∏–ª–∞—Å—å –Ω–∞—à–∞ –¥—Ä—É–∂–±–∞',
      '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è',
      '–°–º–µ—Ö —Å–∫–≤–æ–∑—å –≥–æ–¥—ã',
      '–°–∏–ª–∞ –Ω–∞—Å—Ç–æ—è—â–µ–π –¥—Ä—É–∂–±—ã',
      '–î—Ä—É–∑—å—è –Ω–∞–≤—Å–µ–≥–¥–∞'
    ],
    child: [
      '–û–∂–∏–¥–∞–Ω–∏–µ —á—É–¥–∞',
      '–ú–∞–ª–µ–Ω—å–∫–∏–µ –±–æ–ª—å—à–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è',
      '–ú–∏—Ä –≥–ª–∞–∑–∞–º–∏ —Ä–µ–±–µ–Ω–∫–∞',
      '–ú–æ–º–µ–Ω—Ç—ã —Å—á–∞—Å—Ç—å—è',
      '–ü–æ—Å–ª–∞–Ω–∏–µ –≤ –±—É–¥—É—â–µ–µ'
    ],
    travel: [
      '–ó–æ–≤ –¥–æ—Ä–æ–≥–∏',
      '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –Ω–æ–≤–æ–º –º–∏—Ä–µ',
      '–ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ',
      '–ò—Å–ø—ã—Ç–∞–Ω–∏—è –≤ –ø—É—Ç–∏',
      '–î–æ—Ä–æ–≥–∞ –¥–æ–º–æ–π'
    ]
  };

  const typeChapters = titles[bookType as keyof typeof titles] || [`–ì–ª–∞–≤–∞ ${chapterNumber}`];
  return typeChapters[chapterNumber - 1] || `–ì–ª–∞–≤–∞ ${chapterNumber}`;
}