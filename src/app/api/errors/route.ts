import { NextRequest, NextResponse } from 'next/server'
import { auth } from '@/auth'
import { env } from '@/lib/env'

interface ErrorReport {
  type?: string
  message: string
  stack?: string
  componentStack?: string
  timestamp: string
  userAgent: string
  url: string
  additionalInfo?: any
}

// Rate limiting –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö (–∏–∑–±–µ–≥–∞–µ–º —Å–ø–∞–º)
const errorReports = new Map<string, number[]>()

function shouldAllowErrorReport(ip: string): boolean {
  const now = Date.now()
  const windowMs = 60 * 1000 // 1 –º–∏–Ω—É—Ç–∞
  const maxReports = 10 // –º–∞–∫—Å–∏–º—É–º 10 –æ—Ç—á–µ—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç—É —Å –æ–¥–Ω–æ–≥–æ IP

  if (!errorReports.has(ip)) {
    errorReports.set(ip, [])
  }

  const ipReports = errorReports.get(ip)!
  const recentReports = ipReports.filter((time: number) => time > now - windowMs)

  if (recentReports.length >= maxReports) {
    return false
  }

  recentReports.push(now)
  errorReports.set(ip, recentReports)
  return true
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
function getClientIP(request: NextRequest): string {
  const forwarded = request.headers.get('x-forwarded-for')
  const realIP = request.headers.get('x-real-ip')
  const remoteAddr = request.headers.get('x-vercel-forwarded-for')
  
  if (forwarded) {
    return forwarded.split(',')[0].trim()
  }
  
  if (realIP) {
    return realIP.trim()
  }
  
  if (remoteAddr) {
    return remoteAddr.split(',')[0].trim()
  }
  
  return '127.0.0.1'
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π rate limiting
setInterval(() => {
  const now = Date.now()
  const windowMs = 60 * 1000

  Array.from(errorReports.entries()).forEach(([ip, reports]) => {
    const recentReports = reports.filter((time: number) => time > now - windowMs)
    if (recentReports.length === 0) {
      errorReports.delete(ip)
    } else {
      errorReports.set(ip, recentReports)
    }
  })
}, 5 * 60 * 1000) // –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º IP –¥–ª—è rate limiting
    const ip = getClientIP(request)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if (!shouldAllowErrorReport(ip)) {
      return NextResponse.json(
        { error: 'Too many error reports' },
        { status: 429 }
      )
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ
    const errorReport: ErrorReport = await request.json()

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!errorReport.message || !errorReport.timestamp) {
      return NextResponse.json(
        { error: 'Invalid error report format' },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    const session = await auth()
    const userId = session?.user?.id
    const userEmail = session?.user?.email

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
    const structuredError = {
      id: `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: errorReport.timestamp,
      type: errorReport.type || 'client_error',
      message: errorReport.message,
      stack: errorReport.stack,
      componentStack: errorReport.componentStack,
      url: errorReport.url,
      userAgent: errorReport.userAgent,
      userId: userId || null,
      userEmail: userEmail || null,
      ip: ip,
      additionalInfo: errorReport.additionalInfo,
      environment: env.NODE_ENV,
      severity: determineErrorSeverity(errorReport),
      fingerprint: generateErrorFingerprint(errorReport),
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    console.error('üö® Client Error Report:', {
      id: structuredError.id,
      type: structuredError.type,
      message: structuredError.message,
      severity: structuredError.severity,
      userId: structuredError.userId,
      url: structuredError.url,
      fingerprint: structuredError.fingerprint,
    })

    // –í production –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    if (env.NODE_ENV === 'production') {
      // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Sentry
      // await sendToSentry(structuredError)
      
      // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      // await sendToMonitoringService(structuredError)
      
      // –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø)
      try {
        await saveErrorToDatabase(structuredError)
      } catch (dbError) {
        console.error('Failed to save error to database:', dbError)
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if (structuredError.severity === 'critical' || structuredError.severity === 'high') {
      await notifyAdministrators(structuredError)
    }

    return NextResponse.json(
      { 
        success: true,
        errorId: structuredError.id,
        message: 'Error report received'
      },
      { status: 200 }
    )

  } catch (error) {
    console.error('‚ùå Failed to process error report:', error)
    
    return NextResponse.json(
      { error: 'Failed to process error report' },
      { status: 500 }
    )
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
function determineErrorSeverity(errorReport: ErrorReport): 'low' | 'medium' | 'high' | 'critical' {
  const { message, stack, type } = errorReport

  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
  if (type === 'critical_app_error' || 
      message.includes('ChunkLoadError') ||
      message.includes('Script error') ||
      message.includes('Network Error')) {
    return 'critical'
  }

  // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  if (message.includes('TypeError') ||
      message.includes('ReferenceError') ||
      message.includes('RangeError') ||
      stack?.includes('at Auth') ||
      stack?.includes('at API')) {
    return 'high'
  }

  // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  if (message.includes('Warning') ||
      message.includes('Deprecated') ||
      type === 'validation_error') {
    return 'medium'
  }

  // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  return 'low'
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö –æ—à–∏–±–æ–∫
function generateErrorFingerprint(errorReport: ErrorReport): string {
  const { message, stack } = errorReport
  
  // –°–æ–∑–¥–∞–µ–º –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–µ–∫–∞
  const cleanMessage = message.replace(/\d+/g, 'X') // –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–∞
  const stackLine = stack?.split('\n')[1] || '' // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—Ç–µ–∫–∞
  const cleanStackLine = stackLine.replace(/:\d+:\d+/g, ':X:X') // –ó–∞–º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
  
  const fingerprint = `${cleanMessage}|${cleanStackLine}`
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ö–µ—à
  let hash = 0
  for (let i = 0; i < fingerprint.length; i++) {
    const char = fingerprint.charCodeAt(i)
    hash = ((hash << 5) - hash) + char
    hash = hash & hash // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
  }
  
  return Math.abs(hash).toString(36)
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
async function saveErrorToDatabase(errorReport: any) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { serviceAvailability } = await import('@/lib/env')
    
    if (!serviceAvailability.database) {
      console.log('Database not available for error logging')
      return
    }

    const { prisma } = await import('@/lib/prisma')
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É api_usage –∫–∞–∫ error log
    await prisma.apiUsage.create({
      data: {
        userId: errorReport.userId,
        endpoint: '/api/errors',
        method: 'POST',
        statusCode: 500, // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
        duration: 0,
        errorMessage: JSON.stringify({
          id: errorReport.id,
          type: errorReport.type,
          message: errorReport.message,
          severity: errorReport.severity,
          fingerprint: errorReport.fingerprint,
          url: errorReport.url,
        }),
      }
    })

    console.log('‚úÖ Error saved to database:', errorReport.id)
  } catch (error) {
    console.error('‚ùå Failed to save error to database:', error)
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
async function notifyAdministrators(errorReport: any) {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å:
    // - –û—Ç–ø—Ä–∞–≤–∫–∞ email
    // - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
    // - Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    // - SMS

    console.log('üö® CRITICAL ERROR ALERT:', {
      id: errorReport.id,
      message: errorReport.message,
      severity: errorReport.severity,
      userEmail: errorReport.userEmail,
      url: errorReport.url,
      timestamp: errorReport.timestamp,
    })

    // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (process.env.ALERT_WEBHOOK_URL) {
      await fetch(process.env.ALERT_WEBHOOK_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: `üö® Critical Error in VeloraBook\n` +
                `Message: ${errorReport.message}\n` +
                `Severity: ${errorReport.severity}\n` +
                `User: ${errorReport.userEmail || 'Anonymous'}\n` +
                `URL: ${errorReport.url}\n` +
                `Error ID: ${errorReport.id}`,
        }),
      })
    }
  } catch (error) {
    console.error('Failed to notify administrators:', error)
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
export async function GET(request: NextRequest) {
  if (env.NODE_ENV !== 'development') {
    return NextResponse.json({ error: 'Not available in production' }, { status: 404 })
  }

  try {
    const session = await auth()
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Authentication required' }, { status: 401 })
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    return NextResponse.json({
      activeIps: errorReports.size,
      totalReportsInMemory: Array.from(errorReports.values())
        .reduce((sum, reports) => sum + reports.length, 0),
      timestamp: new Date().toISOString(),
    })
  } catch (error) {
    return NextResponse.json({ error: 'Failed to get error stats' }, { status: 500 })
  }
}