#!/usr/bin/env tsx

import 'dotenv/config'

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
}

class ComponentTester {
  private log(color: string, message: string) {
    console.log(`${color}${message}${colors.reset}`)
  }

  // –¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  async testEnvironment() {
    console.log(`${colors.cyan}üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...${colors.reset}`)
    
    try {
      const { env, serviceAvailability } = await import('../src/lib/env')
      
      console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')
      console.log(`   NODE_ENV: ${env.NODE_ENV}`)
      console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${serviceAvailability.database ? '‚úÖ' : '‚ùå'}`)
      console.log(`   OpenAI: ${serviceAvailability.openai ? '‚úÖ' : '‚ùå'}`)
      console.log(`   Google Auth: ${serviceAvailability.googleAuth ? '‚úÖ' : '‚ùå'}`)
      console.log(`   Cloudflare R2: ${serviceAvailability.cloudflareR2 ? '‚úÖ' : '‚ùå'}`)
      console.log(`   Upstash Redis: ${serviceAvailability.upstashRedis ? '‚úÖ' : '‚ùå'}`)
      
      return true
    } catch (error) {
      this.log(colors.red, `‚ùå –û—à–∏–±–∫–∞: ${error}`)
      return false
    }
  }

  // –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async testDatabase() {
    console.log(`\n${colors.cyan}üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${colors.reset}`)
    
    try {
      const { prisma, checkDatabaseHealth } = await import('../src/lib/prisma')
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const isHealthy = await checkDatabaseHealth()
      if (!isHealthy) {
        throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
      }
      
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: OK')
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
      const userCount = await prisma.user.count()
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ: ${userCount}`)
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const demoUser = await prisma.user.findUnique({
        where: { email: 'demo@velorabook.com' }
      })
      
      console.log(`‚úÖ –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${demoUser ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`)
      
      return true
    } catch (error) {
      this.log(colors.red, `‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error}`)
      return false
    }
  }

  // –¢–µ—Å—Ç Redis
  async testRedis() {
    console.log(`\n${colors.cyan}üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis...${colors.reset}`)
    
    try {
      const { checkRedisHealth, CacheService } = await import('../src/lib/redis')
      
      const health = await checkRedisHealth()
      
      if (health.available) {
        console.log(`‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω (${health.type})`)
        console.log(`‚úÖ –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${health.latency}ms`)
        
        // –¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const testKey = `test:${Date.now()}`
        const testData = { message: 'test', timestamp: Date.now() }
        
        await CacheService.set(testKey, testData, 10)
        const cached = await CacheService.get(testKey)
        await CacheService.delete(testKey)
        
        if (JSON.stringify(cached) === JSON.stringify(testData)) {
          console.log('‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        } else {
          throw new Error('–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        }
      } else {
        this.log(colors.yellow, `‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${health.error}`)
        console.log('   –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
      }
      
      return true
    } catch (error) {
      this.log(colors.red, `‚ùå –û—à–∏–±–∫–∞ Redis: ${error}`)
      return false
    }
  }

  // –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async testAuthentication() {
    console.log(`\n${colors.cyan}üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...${colors.reset}`)
    
    try {
      const { userService } = await import('../src/auth')
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const demoUser = await userService.getUserById('demo-user-id')
      
      if (demoUser && demoUser.email === 'demo@velorabook.com') {
        console.log('‚úÖ –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω')
      } else {
        throw new Error('–î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
      }
      
      console.log('‚úÖ –°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç')
      
      return true
    } catch (error) {
      this.log(colors.red, `‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error}`)
      return false
    }
  }

  // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  async testValidation() {
    console.log(`\n${colors.cyan}‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...${colors.reset}`)
    
    try {
      const { 
        validateWithSchema, 
        UserRegistrationSchema, 
        ValidationUtils 
      } = await import('../src/lib/validation')
      
      // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
      const validUser = {
        name: '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        email: 'test@example.com',
        password: 'test123456'
      }
      
      const validated = validateWithSchema(UserRegistrationSchema, validUser)
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: OK')
      
      // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
      try {
        const invalidUser = {
          name: '',
          email: 'invalid-email',
          password: '123'
        }
        validateWithSchema(UserRegistrationSchema, invalidUser)
        throw new Error('–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π')
      } catch (validationError: any) {
        if (validationError.issues) {
          console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: OK')
        } else {
          throw validationError
        }
      }
      
      // –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const sqlTest = ValidationUtils.isSqlInjection("'; DROP TABLE users; --")
      const xssTest = ValidationUtils.isXSS("<script>alert('xss')</script>")
      
      if (sqlTest && xssTest) {
        console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞—Ç–∞–∫: OK')
      } else {
        throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞—Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
      }
      
      return true
    } catch (error) {
      this.log(colors.red, `‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error}`)
      return false
    }
  }

  // –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  async testSecurity() {
    console.log(`\n${colors.cyan}üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...${colors.reset}`)
    
    try {
      const { 
        TokenGenerator, 
        PasswordSecurity, 
        AttackProtection 
      } = await import('../src/lib/security')
      
      // –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–æ–≤
      const token = TokenGenerator.generateSecureToken()
      const uuid = TokenGenerator.generateUUID()
      
      if (token.length === 64 && uuid.includes('-')) {
        console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤: OK')
      } else {
        throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
      }
      
      // –¢–µ—Å—Ç –ø–∞—Ä–æ–ª–µ–π
      const password = 'TestPassword123!'
      const hash = await PasswordSecurity.hashPassword(password)
      const isValid = await PasswordSecurity.verifyPassword(password, hash)
      
      if (isValid) {
        console.log('‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π: OK')
      } else {
        throw new Error('–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
      }
      
      // –¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞—Ç–∞–∫
      const sqlDetected = AttackProtection.detectSQLInjection("1' OR '1'='1")
      const xssDetected = AttackProtection.detectXSS("<script>alert(1)</script>")
      
      if (sqlDetected && xssDetected) {
        console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞—Ç–∞–∫: OK')
      } else {
        throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞—Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
      }
      
      return true
    } catch (error) {
      this.log(colors.red, `‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${error}`)
      return false
    }
  }

  // –¢–µ—Å—Ç API (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
  async testAPI() {
    console.log(`\n${colors.cyan}üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...${colors.reset}`)
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
      const response = await fetch('http://localhost:3000/api/health', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      })
      
      if (response.ok) {
        const data = await response.json()
        console.log(`‚úÖ Health API: ${data.status}`)
        return true
      } else {
        throw new Error(`API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`)
      }
    } catch (error) {
      this.log(colors.yellow, `‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error}`)
      console.log('   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev')
      return false
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAll() {
    console.log(`${colors.cyan}üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ VeloraBook${colors.reset}`)
    console.log(`${colors.cyan}=====================================${colors.reset}\n`)
    
    const tests = [
      { name: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è', fn: () => this.testEnvironment() },
      { name: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', fn: () => this.testDatabase() },
      { name: 'Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ', fn: () => this.testRedis() },
      { name: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', fn: () => this.testAuthentication() },
      { name: '–í–∞–ª–∏–¥–∞—Ü–∏—è', fn: () => this.testValidation() },
      { name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', fn: () => this.testSecurity() },
      { name: 'API', fn: () => this.testAPI() },
    ]
    
    let passed = 0
    let failed = 0
    
    for (const test of tests) {
      try {
        const result = await test.fn()
        if (result) {
          passed++
        } else {
          failed++
        }
      } catch (error) {
        this.log(colors.red, `‚ùå ${test.name}: ${error}`)
        failed++
      }
    }
    
    // –ò—Ç–æ–≥–∏
    console.log(`\n${colors.cyan}üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${colors.reset}`)
    this.log(colors.green, `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}`)
    
    if (failed > 0) {
      this.log(colors.red, `‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${failed}`)
    }
    
    if (failed === 0) {
      this.log(colors.green, '\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
    } else {
      this.log(colors.yellow, '\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è')
    }
    
    return failed === 0
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
  const tester = new ComponentTester()
  tester.runAll()
    .then(success => process.exit(success ? 0 : 1))
    .catch(error => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
      process.exit(1)
    })
}

export { ComponentTester }