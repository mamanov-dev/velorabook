import { auth } from '@/auth'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
const publicRoutes = [
  '/', 
  '/auth/signin', 
  '/auth/signup', 
  '/auth/error',
  '/api/health',
  '/api/register',
]

// –ú–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
const authRoutes = ['/auth/signin', '/auth/signup']

// API –º–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const publicApiRoutes = [
  '/api/auth',
  '/api/health', 
  '/api/register',
]

export default auth((req) => {
  try {
    const { nextUrl } = req
    const isLoggedIn = !!req.auth

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ development
    if (process.env.NODE_ENV === 'development') {
      console.log('üîí Middleware:', {
        path: nextUrl.pathname,
        isLoggedIn,
        userEmail: req.auth?.user?.email,
      })
    }

    const isApiRoute = nextUrl.pathname.startsWith('/api')
    const isPublicApiRoute = publicApiRoutes.some(route => 
      nextUrl.pathname.startsWith(route)
    )
    const isPublicRoute = publicRoutes.includes(nextUrl.pathname)
    const isAuthRoute = authRoutes.includes(nextUrl.pathname)

    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (isApiRoute && isPublicApiRoute) {
      return NextResponse.next()
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (isAuthRoute && isLoggedIn) {
      const callbackUrl = nextUrl.searchParams.get('callbackUrl')
      const redirectUrl = callbackUrl && callbackUrl.startsWith('/') 
        ? callbackUrl 
        : '/dashboard'
      
      if (process.env.NODE_ENV === 'development') {
        console.log('‚Ü©Ô∏è Redirecting authenticated user from auth page to:', redirectUrl)
      }
      
      return NextResponse.redirect(new URL(redirectUrl, nextUrl))
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!isLoggedIn) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏—á–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º
      if (isPublicRoute) {
        return NextResponse.next()
      }

      // API –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (isApiRoute) {
        return NextResponse.json(
          { 
            error: 'Authentication required',
            code: 'UNAUTHORIZED' 
          }, 
          { status: 401 }
        )
      }

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
      let callbackUrl = nextUrl.pathname
      if (nextUrl.search) {
        callbackUrl += nextUrl.search
      }

      const encodedCallbackUrl = encodeURIComponent(callbackUrl)
      const signInUrl = new URL(`/auth/signin?callbackUrl=${encodedCallbackUrl}`, nextUrl)
      
      if (process.env.NODE_ENV === 'development') {
        console.log('üîê Redirecting to sign in:', signInUrl.href)
      }
      
      return NextResponse.redirect(signInUrl)
    }

    // API –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏
    if (isApiRoute && !isPublicApiRoute) {
      if (!req.auth?.user?.id) {
        return NextResponse.json(
          { 
            error: 'Valid session required',
            code: 'INVALID_SESSION' 
          }, 
          { status: 401 }
        )
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const response = NextResponse.next()
    
    // Content Security Policy (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
    if (!isApiRoute) {
      response.headers.set(
        'Content-Security-Policy',
        "default-src 'self'; " +
        "script-src 'self' 'unsafe-eval' 'unsafe-inline'; " +
        "style-src 'self' 'unsafe-inline'; " +
        "img-src 'self' data: https:; " +
        "font-src 'self'; " +
        "connect-src 'self' https:; " +
        "frame-src 'none';"
      )
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    response.headers.set('X-Frame-Options', 'DENY')
    response.headers.set('X-Content-Type-Options', 'nosniff')
    response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
    response.headers.set('X-XSS-Protection', '1; mode=block')

    return response
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ middleware
    console.error('‚ùå Middleware error:', error)
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
    const response = NextResponse.next()
    
    if (process.env.NODE_ENV === 'development') {
      response.headers.set('X-Middleware-Error', 'true')
    }
    
    return response
  }
})

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π matcher - –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - robots.txt, sitemap.xml (SEO files)
     * - images, icons (public assets)
     */
    '/((?!_next/static|_next/image|favicon.ico|robots.txt|sitemap.xml|images|icons).*)',
  ],
}